/*
 * Sm2Certification.h
 *
 *  Created on: 2016-3-10
 *      Author: root
 */

#ifndef SM2CERTIFICATION_H_
#define SM2CERTIFICATION_H_
#include "stm32f2xx_conf.h"
#include <stdint.h>
#include "stdbool.h"



uint8_t sm2PubKey_x[32]= {0x41,0x62,0xb7,0x29,0x9b,0XF3,0X92,0X0B,0XBE,0XD5,0X70,0XC8,0X2E,0X3A,0XD0,0X0B,\
                          0X88,0X86,0X33,0X3D,0XC9,0XE5,0XE1,0XBE,0X67,0XF1,0XB9,0XF3,0X75,0X03,0XBA,0X9F
                         }; //公钥X轴
uint8_t sm2PubKey_y[32]= {0XB3,0XDF,0X6C,0X1C,0X6D,0XF9,0X3F,0X78,0x70,0xfc,0XCB,0X25,0X6A,0X88,0X38,0X5C,\
                          0X63,0X04,0X66,0XF2,0X8C,0X77,0X01,0X50,0X9E,0X1E,0X2D,0X19,0XD6,0XCA,0X94,0XB5
                         }; //公钥Y轴
uint8_t sm2PrivKey[32]= {0xA2,0XA8,0X43,0X2C,0X90,0X5E,0X8D,0XF5,0XD0,0X1C,0XC0,0X1F,0XED,0X4C,0XF5,0XD3,\
                         0X54,0X85,0X3B,0XF7,0X9A,0X52,0X01,0XC7,0X3F,0X15,0X56,0XB4,0XFF,0X46,0X16,0X9C
                        };  //私钥
uint8_t devNr[8]= {'B','L','1','2','3','4','5','6'};   //读写设备序列号，前2个字节由CA服务器指定，后6个字节可自定义
uint8_t digitalCer[586]=\
{
    0X30,0X82,0X02 ,0X06 ,0X30 ,0X82 ,0X01 ,0XA9,0XA0 ,0X03 ,0X02 ,0X01 ,0X02 ,0X02 ,0X09 ,0X00 \
    ,0XFD,0XA4,0X25 ,0X42 ,0X3D ,0X6E ,0XFB ,0XCD ,0X30 ,0X0C,0X06 ,0X08 ,0X2A ,0X81 ,0X1C ,0XCF \
    ,0X55,0X01 ,0X83,0X75,0X05,0X00,0X30,0X56 ,0X31,0X0B,0X30,0X09 ,0X06 ,0X03,0X55 ,0X04 \
    ,0X06,0X0C,0X02,0X43,0X4E,0X31,0X0B,0X30,0X09,0X06,0X03,0X55,0X04,0X08,0X0C,0X02\
    ,0X4A,0X53,0X31,0X0B,0X30,0X09,0X06,0X03,0X55,0X04,0X07,0X0C,0X02,0X57,0X58,0X31\
    ,0X0D,0X30,0X0B,0X06,0X03,0X55,0X04,0X0A,0X0C,0X04,0X54,0X4D,0X52,0X49,0X31,0X0D\
    ,0X30,0X0B,0X06,0X03,0X55,0X04,0X0B,0X0C,0X04,0X54,0X4D,0X52,0X49,0X31,0X0F,0X30\
    ,0X0D,0X06,0X03,0X55,0X04,0X03,0X0C,0X06,0X52,0X46,0X49,0X44,0X43,0X41,0X30,0X1E\
    ,0X17,0X0D,0X31,0X36,0X30,0X33,0X32,0X32,0X30,0X38,0X34,0X34,0X31,0X35,0X5A,0X17\
    ,0X0D,0X33,0X36,0X30,0X33,0X32,0X32,0X30,0X38,0X34,0X34,0X31,0X35,0X5A,0X30,0X57\
    ,0X31,0X0B,0X30,0X09,0X06,0X03,0X55,0X04,0X06,0X0C,0X02,0X43,0X4E,0X31,0X0B,0X30\
    ,0X09,0X06,0X03,0X55,0X04,0X08,0X0C,0X02,0X4A,0X53,0X31,0X0B,0X30,0X09,0X06,0X03\
    ,0X55,0X04,0X07,0X0C,0X02,0X4E,0X4A,0X31,0X0D,0X30,0X0B,0X06,0X03,0X55,0X04,0X0A\
    ,0X0C,0X04,0X42,0X45,0X4C,0X4E,0X31,0X0D,0X30,0X0B,0X06,0X03,0X55,0X04,0X0B,0X0C\
    ,0X04,0X42,0X45,0X4C,0X4E,0X31,0X10,0X30,0X0E,0X06,0X03,0X55,0X04,0X03,0X0C,0X07\
    ,0X32,0X42,0X4C,0X42,0X45,0X4C,0X4E,0X30,0X59,0X30,0X13,0X06,0X07,0X2A,0X86,0X48\
    ,0XCE,0X3D,0X02,0X01,0X06,0X08,0X2A,0X81,0X1C,0XCF,0X55,0X01,0X82,0X2D,0X03,0X42\
    ,0X00,0X04,0X41,0X62,0XB7,0X29,0X9B,0XF3,0X92,0X0B,0XBE,0XD5,0X70,0XC8,0X2E,0X3A\
    ,0XD0,0X0B,0X88,0X86,0X33,0X3D,0XC9,0XE5,0XE1,0XBE,0X67,0XF1,0XB9,0XF3,0X75,0X03\
    ,0XBA,0X9F,0XB3,0XDF,0X6C,0X1C,0X6D,0XF9,0X3F,0X78,0X70,0XFC,0XCB,0X25,0X6A,0X88\
    ,0X38,0X5C,0X63,0X04,0X66,0XF2,0X8C,0X77,0X01,0X50,0X9E,0X1E,0X2D,0X19,0XD6,0XCA\
    ,0X94,0XB5,0XA3,0X5D,0X30,0X5B,0X30,0X1F,0X06,0X03,0X55,0X1D,0X23,0X04,0X18,0X30\
    ,0X16,0X80,0X14,0X4C,0X32,0XB1,0X97,0XD9,0X33,0X1B,0XC4,0XA6,0X05,0XC1,0XC6,0XE5\
    ,0X8B,0X62,0X5B ,0XF0 ,0X97 ,0X76 ,0X58,0X30,0X0C,0X06,0X03,0X55,0X1D,0X13,0X04,0X05\
    ,0X30,0X03,0X01,0X01,0XFF,0X30,0X0B,0X06,0X03,0X55,0X1D,0X0F,0X04,0X04,0X03,0X02\
    ,0X01,0X06,0X30,0X1D,0X06,0X03,0X55,0X1D,0X0E,0X04,0X16,0X04,0X14,0X4C,0X32,0XB1\
    ,0X97 ,0XD9 ,0X33 ,0X1B ,0XC4 ,0XA6 ,0X05 ,0XC1 ,0XC6 ,0XE5 ,0X8B ,0X62 ,0X5B ,0XF0 ,0X97 ,0X76 \
    ,0X58 ,0X30 ,0X0C ,0X06 ,0X08 ,0X2A ,0X81 ,0X1C ,0XCF ,0X55 ,0X01 ,0X83 ,0X75 ,0X05 ,0X00 ,0X03 \
    ,0X49 ,0X00 ,0X30 ,0X46 ,0X02 ,0X21 ,0X00 ,0X88 ,0XDB ,0XC8,0X1D ,0X5B ,0XD7,0XA7,0X5F,0XF3 \
    ,0X02 ,0XDF ,0XF0 ,0XDD ,0X25 ,0X18 ,0XB6 ,0X8B ,0X39 ,0X64 ,0XA1,0X12 ,0X60 ,0X46 ,0X31 ,0X73 \
    ,0X74,0X77 ,0X69 ,0XFB ,0XD5 ,0X30,0XEC ,0X02 ,0X21 ,0X00 ,0XA4 ,0XA1 ,0X87 ,0X0D ,0X9F ,0X95 \
    ,0XD1,0X86,0X05,0X6B ,0XEA ,0X81 ,0X0E ,0XB0 ,0X88 ,0X06 ,0XD8 ,0XC2 ,0X6C ,0XFE,0X15 ,0X8D\
    ,0X6B,0XBA ,0X1D ,0XA5,0XBF ,0X61 ,0XC4 ,0X9F ,0X6D ,0X93
};

//#include "IOCtrl.h"
//#include "HbFrame_Operation.h"


//  int digitalCerLen; //数字证书长度
//  uint8_t *cerChain; //证书链，长度未知，所以要动态分配内存
//  int cerChainLen; //证书链长度
//  uint8_t userMsg[224]; //用作激活用的用户信息数据
//private:
//  MCUToSecureComm *m_pM2SecComm;
//  IOCtrl *m_pIOCtrl;

//  bool applyCerChain(); //申请证书链
//  bool sendCerChainToSec();//发送证书链给安全模块
//  void notifyBindingRequestToCA(); //将授权申请打包成数字信封并发送给服务器
//  void waitBindingAcceptFromCA(); //从CA服务器获取许可证的数字信封，再解包出许可证
//public:
//  inline void setM2SecComm(MCUToSecureComm *pM2SecComm){
//      m_pM2SecComm = pM2SecComm;
//  };
//  inline void setIOCtrl(IOCtrl *pIOCtrl){
//      m_pIOCtrl = pIOCtrl;
//  }



//  llrp_u8v_t bindingRequestData;
//  llrp_u8v_t bindingAcceptData;
//public:
//  int finishCerChain; //收到证书链标记
//  bool readyForBindingRequest; //是否准备好发送绑定请求
//  bool recivedForBindingAccept; //是否接收到绑定接受


//Sm2Certification();
void InitVariable(void);

//virtual ~Sm2Certification();
void ReleaseVariable(void );
bool initSm2Key(void);
bool initDevNr(void);
bool initDigitalCer(void);
bool initUserMsg(void);

bool CertificationID(void); //身份认证

#endif /* SM2CERTIFICATION_H_ */


